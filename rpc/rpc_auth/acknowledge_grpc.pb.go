// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.25.2
// source: acknowledge.proto

package rpc_auth

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	AddEmployeeAck_EmployeeAdded_FullMethodName = "/AddEmployeeAck/EmployeeAdded"
)

// AddEmployeeAckClient is the client API for AddEmployeeAck service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AddEmployeeAckClient interface {
	EmployeeAdded(ctx context.Context, in *AddEmployeeRequest, opts ...grpc.CallOption) (*AddEmployeeResponse, error)
}

type addEmployeeAckClient struct {
	cc grpc.ClientConnInterface
}

func NewAddEmployeeAckClient(cc grpc.ClientConnInterface) AddEmployeeAckClient {
	return &addEmployeeAckClient{cc}
}

func (c *addEmployeeAckClient) EmployeeAdded(ctx context.Context, in *AddEmployeeRequest, opts ...grpc.CallOption) (*AddEmployeeResponse, error) {
	out := new(AddEmployeeResponse)
	err := c.cc.Invoke(ctx, AddEmployeeAck_EmployeeAdded_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AddEmployeeAckServer is the server API for AddEmployeeAck service.
// All implementations must embed UnimplementedAddEmployeeAckServer
// for forward compatibility
type AddEmployeeAckServer interface {
	EmployeeAdded(context.Context, *AddEmployeeRequest) (*AddEmployeeResponse, error)
	mustEmbedUnimplementedAddEmployeeAckServer()
}

// UnimplementedAddEmployeeAckServer must be embedded to have forward compatible implementations.
type UnimplementedAddEmployeeAckServer struct {
}

func (UnimplementedAddEmployeeAckServer) EmployeeAdded(context.Context, *AddEmployeeRequest) (*AddEmployeeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EmployeeAdded not implemented")
}
func (UnimplementedAddEmployeeAckServer) mustEmbedUnimplementedAddEmployeeAckServer() {}

// UnsafeAddEmployeeAckServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AddEmployeeAckServer will
// result in compilation errors.
type UnsafeAddEmployeeAckServer interface {
	mustEmbedUnimplementedAddEmployeeAckServer()
}

func RegisterAddEmployeeAckServer(s grpc.ServiceRegistrar, srv AddEmployeeAckServer) {
	s.RegisterService(&AddEmployeeAck_ServiceDesc, srv)
}

func _AddEmployeeAck_EmployeeAdded_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddEmployeeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AddEmployeeAckServer).EmployeeAdded(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AddEmployeeAck_EmployeeAdded_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AddEmployeeAckServer).EmployeeAdded(ctx, req.(*AddEmployeeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// AddEmployeeAck_ServiceDesc is the grpc.ServiceDesc for AddEmployeeAck service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AddEmployeeAck_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "AddEmployeeAck",
	HandlerType: (*AddEmployeeAckServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "EmployeeAdded",
			Handler:    _AddEmployeeAck_EmployeeAdded_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "acknowledge.proto",
}
